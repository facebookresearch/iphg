# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
#
# This source code is licensed under the license found in the
# LICENSE file in the root directory of this source tree.

import torch
import math
import warnings
from typing import Optional


# From: https://github.com/caseman/noise


def get_perm(device):
    if get_perm.perm is not None and get_perm.perm.device == device:
        return get_perm.perm

    # fmt: off
    get_perm.perm = torch.tensor([151,160,137,91,90,15, 
        131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23, 
        190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33, 
        88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166, 
        77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244, 
        102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196, 
        135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123, 
        5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42, 
        223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9, 
        129,22,39,253,9,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228, 
        251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107, 
        49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254, 
        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180], device=device)
    # fmt: on

    return get_perm.perm


get_perm.perm = None


def grad(hash: int, x: torch.Tensor):
    g = (hash & 7) + 1.0
    g = torch.where(hash & 8 > 0, -1, g)
    return g * x


def perlin_noise(x: torch.Tensor, repeat: int):
    i = torch.floor(x).long() % repeat
    ii = (i + 1) % repeat
    i = i & 255
    ii = ii & 255

    x -= torch.floor(x)
    fx = x * x * x * (x * (x * 6 - 15) + 10)

    return (
        torch.lerp(
            grad(get_perm(x.device)[i], x), grad(get_perm(x.device)[ii], x - 1), fx
        )
        * 0.5
    )


def fractal_noise(
    x: torch.Tensor, octaves: int = 2, persistence: float = 0.5, lacunarity: float = 2.0
) -> torch.Tensor:
    freq = 1.0
    amp = 1.0
    max = 0.0
    total = 0.0
    repeat = 1024  # Arbitrary

    for _ in range(octaves):
        total += perlin_noise(x * freq, int(repeat * freq)) * amp
        max += amp
        freq *= lacunarity
        amp *= persistence

    return total / max


def fractal_noise3(
    x: torch.Tensor, octaves: int = 2, persistence: float = 0.5, lacunarity: float = 2.0
) -> torch.Tensor:
    # Randomly chosen to ensure each component has random offset
    perm_index = (0, 4, 7)

    return torch.cat(
        [
            fractal_noise(
                x + get_perm(x.device)[i] / 255 * 10.0 + 10.0,
                octaves,
                persistence,
                lacunarity,
            )
            for i in perm_index
        ],
        dim=-1,
    )


# Custom version of https://pytorch.org/docs/stable/_modules/torch/nn/init.html#trunc_normal_
# that accepts a generator
def trunc_normal(
    tensor: torch.Tensor,
    mean: float = 0.0,
    std: float = 1.0,
    a: float = -2.0,
    b: float = 2.0,
    generator: Optional[torch.Generator] = None,
) -> torch.Tensor:
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1.0 + math.erf(x / math.sqrt(2.0))) / 2.0

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn(
            "mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
            "The distribution of values may be incorrect.",
            stacklevel=2,
        )

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1, generator=generator)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.0))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor
